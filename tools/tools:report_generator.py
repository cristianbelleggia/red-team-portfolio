#!/usr/bin/env python3
"""
report_generator.py
Generate a clean HTML report from a log_report.json produced by tools/log_parser.py.

Usage:
  python3 tools/report_generator.py -i reports/log_report.json -o reports/log_report.html --title "AD Lab Report"

Output:
  An HTML file with counts and sample hits for each pattern.
"""
import json
import argparse
import html
from datetime import datetime
from pathlib import Path

TEMPLATE = """<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>{title}</title>
  <style>
    body {{ font-family: Arial, Helvetica, sans-serif; margin: 24px; }}
    h1 {{ border-bottom: 1px solid #ddd; padding-bottom: 8px; }}
    .meta {{ color: #666; margin-bottom: 16px; }}
    .section {{ margin-bottom: 20px; }}
    table {{ border-collapse: collapse; width: 100%; }}
    th, td {{ border: 1px solid #eee; padding: 8px; text-align: left; }}
    th {{ background: #f7f7f7; }}
    pre {{ white-space: pre-wrap; word-break: break-word; background:#fcfcfc; padding:8px; border:1px solid #eee; }}
  </style>
</head>
<body>
  <h1>{title}</h1>
  <div class="meta">Generated: {generated}</div>

  <div class="section">
    <h2>Summary</h2>
    <table>
      <thead><tr><th>Pattern</th><th>Count</th></tr></thead>
      <tbody>
        {summary_rows}
      </tbody>
    </table>
  </div>

  {detail_sections}

  <footer style="margin-top:40px;color:#888;font-size:12px;">Report generated by report_generator.py â€” Data are illustrative and from lab environments only.</footer>
</body>
</html>
"""

def make_summary_rows(counts):
    rows = []
    for k, v in counts.items():
        rows.append(f"<tr><td>{html.escape(k)}</td><td>{v}</td></tr>")
    return "\n".join(rows)

def make_detail_sections(hits):
    sections = []
    for k, items in hits.items():
        if not items:
            continue
        rows = []
        # show up to 20 examples
        for it in items[:20]:
            line_no = it.get("line_no", "-")
            line = html.escape(it.get("line", ""))
            rows.append(f"<tr><td>{line_no}</td><td><pre>{line}</pre></td></tr>")
        table = "<table><thead><tr><th>Line</th><th>Content</th></tr></thead><tbody>{}</tbody></table>".format("\n".join(rows))
        sections.append(f"<div class='section'><h3>{html.escape(k)}</h3>{table}</div>")
    return "\n".join(sections)

def load_json(path):
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def main():
    parser = argparse.ArgumentParser(description="Generate HTML report from log_report.json")
    parser.add_argument("-i","--input", required=True, help="Path to log_report.json")
    parser.add_argument("-o","--output", required=True, help="Path to output HTML file")
    parser.add_argument("--title", default="Log Analysis Report", help="Report title")
    args = parser.parse_args()

    data = load_json(args.input)
    counts = data.get("counts", {})
    hits = data.get("hits", {})

    summary = make_summary_rows(counts)
    details = make_detail_sections(hits)

    html_text = TEMPLATE.format(
        title=html.escape(args.title),
        generated=datetime.utcnow().isoformat() + "Z",
        summary_rows=summary,
        detail_sections=details
    )

    out = Path(args.output)
    out.parent.mkdir(parents=True, exist_ok=True)
    out.write_text(html_text, encoding="utf-8")
    print(f"[+] Wrote HTML report to {out}")

if __name__ == "__main__":
    main()
